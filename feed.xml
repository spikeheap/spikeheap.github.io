<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
	<channel>
		<title>Ryan Brooks&#39; blog</title>
		<description>Technical musings and notes from a polyglot developer</description>		
		<link>https://www.ryanbrooks.co.uk</link>
		<atom:link href="https://www.ryanbrooks.co.uk/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>A simple HTTPS proxy with Nginx on Docker</title>
				<dc:creator></dc:creator>
				
					<description>&lt;p&gt;There are many reasons why you might need to develop behind an HTTPS proxy, for example when testing integrations which behave differently based on the security of your site. This post describes how to add an nginx proxy to your docker setup.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;tldr&quot;&gt;TL;DR&lt;/h3&gt;

&lt;p&gt;I know, you probably don’t care about the back-story, you just want the code. If that’s you, this is all you need:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;This isn’t production-quality. Mirror your production environment if you can.&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;Dockerfile&lt;/code&gt; and &lt;code&gt;nginx.conf&lt;/code&gt; are in &lt;a href=&quot;https://gist.github.com/spikeheap/488929887d22e74783a5f4f982981a84&quot;&gt;this gist&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;This assumes you’ve got a &lt;code&gt;rails&lt;/code&gt; container linked through docker-compose. Tweak it to your needs.&lt;/li&gt;
  &lt;li&gt;See [1].&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;background&quot;&gt;Background&lt;/h3&gt;

&lt;p&gt;Not so long back I was working on a Dropbox OAuth integration. This sent the user off to Dropbox to approve and connect their account to us before redirecting back to our site to continue the process. Dropbox have rules in place to protect users from accidentally exposing their details on insecure sites and push developers to secure their work. One of these rules means that if you ask Dropbox to redirect a user back to an HTTP address it will &lt;em&gt;always&lt;/em&gt; ask them to confirm their permission. If you’re using HTTPS it will just redirect back if they have already approved the connection in the past. This difference in behaviour is a sensible one, however it’s another example of the development and production environments diverging, which we don’t really want.&lt;/p&gt;

&lt;p&gt;It’s good practice to have all your production traffic use HTTPS, so we need a lightweight HTTPS proxy which we can stick in front of whichever app server we’re developing against.&lt;/p&gt;

&lt;p&gt;At this point, we’re not too concerned about production performance, and want to retain development conveniences such as live-reloading, so we can just proxy requests directly to our app, in this case a Rails server fired up using &lt;code&gt;rails s&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;the-setup&quot;&gt;The setup&lt;/h3&gt;

&lt;p&gt;You may already have an nginx config which works for you in production, but if not, here’s a simple setup which proxies all requests to an upstream server/container named ‘rails’, and redirects all HTTP traffic to HTTPS:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;user nobody nogroup;

pid /tmp/nginx.pid;

error_log stderr;
# error_log /var/log/nginx/error.log;

events {
  worker_connections 1024; # increase if you have lots of clients
  accept_mutex off; # &amp;quot;on&amp;quot; if nginx worker_processes &amp;gt; 1
  # use epoll; # enable for Linux 2.6+
  # use kqueue; # enable for FreeBSD, OSX
}

http {
  include mime.types;
  default_type application/octet-stream;
  # access_log /var/log/nginx/access.log combined;
  access_log /dev/stdout;
  sendfile on;
  tcp_nopush on; # off may be better for *some* Comet/long-poll stuff
  tcp_nodelay off; # on may be better for some Comet/long-poll stuff
  gzip on;
  gzip_http_version 1.0;
  gzip_proxied any;
  gzip_min_length 500;
  gzip_disable &amp;quot;MSIE [1-6]\.&amp;quot;;

  # So Rails can be aware of whether it&amp;#39;s HTTP/HTTPS
  proxy_set_header X-Forwarded-Proto $scheme;

  upstream app_server {
    server rails:3000 fail_timeout=0;
  }

  # global certs per ip but a cert can sign *.mysite.dev mysite.dev
  ssl_certificate      /usr/local/app/certs/server.crt;
  ssl_certificate_key  /usr/local/app/certs/server.key;

  server {
    listen         80;
    server_name    192.168.99.100;
    return         301 https://$server_name$request_uri;
  }

  server {
    listen       443 ssl;
    server_name 192.168.99.100;
    ssl           on;
    client_max_body_size 4G;
    keepalive_timeout 5;
    root /usr/src/app/;
    try_files $uri/index.html $uri.html $uri @app;

    location @app {
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_pass http://app_server;
    }

    # Rails error pages
    error_page 500 502 503 504 /500.html;
    location = /500.html {
      root /usr/src/app/public;
    }
  }
}
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/spikeheap/488929887d22e74783a5f4f982981a84.js?file=nginx.conf&quot;&gt; &lt;/script&gt;

&lt;p&gt;The &lt;a href=&quot;TODO&quot;&gt;official nginx docker images&lt;/a&gt; don’t currently support HTTPS, so we’ll need to build an image to serve as our proxy:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;FROM alpine:3.2
MAINTAINER ryan@slatehorse.com

RUN apk add --update nginx openssl &amp;amp;&amp;amp; rm -rf /var/cache/apk/*

COPY ./nginx.conf /etc/nginx/nginx.conf

# Generate certificates
ENV CERTIFICATE_DIR=/usr/local/app/certs

# The hostname used in the certificate. For OSX/Windows you can use the VM IP.
# For Linux, localhost works fine. 
ENV DOCKER_HOSTNAME=192.168.99.100

RUN mkdir -p /usr/local/app/certs

RUN openssl req -new -x509 -nodes -subj &amp;quot;/CN=${DOCKER_HOSTNAME}/O=Your Company Name/C=UK&amp;quot; -keyout $CERTIFICATE_DIR/server.key -out $CERTIFICATE_DIR/server.crt

VOLUME /var/log/nginx/

EXPOSE 80 443

CMD [&amp;quot;nginx&amp;quot;, &amp;quot;-g&amp;quot;, &amp;quot;daemon off;&amp;quot;]
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/spikeheap/488929887d22e74783a5f4f982981a84.js?file=Dockerfile&quot;&gt; &lt;/script&gt;

&lt;p&gt;This isn’t really doing anything interesting other than the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;RUN openssl req -new -x509 -nodes -subj &quot;/CN=${DOCKER_HOSTNAME}/O=Your Company Name/C=UK&quot; -keyout $CERTIFICATE_DIR/server.key -out $CERTIFICATE_DIR/server.crt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This generates a self-signed certificate and drops it into the path we’ve used in &lt;code&gt;nginx.conf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With that, you’re ready to go, in development at least. To integrate this into an existing docker-compose setup you could drop the above files in &lt;code&gt;./docker/nginx/&lt;/code&gt; and add the following to your &lt;code&gt;docker-compose.yml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;nginx:
  build: docker/nginx/
  ports:
    - &quot;80:80&quot;
    - &quot;443:443&quot;
  links:
    - rails
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fire up a browser and check it out. The certificate is self-signed, so your browser won’t trust it by default, but you trust yourself… right?&lt;/p&gt;

&lt;h3 id=&quot;caching&quot;&gt;Caching&lt;/h3&gt;

&lt;p&gt;With the above approach you’ll get a new self-signed certificate every time you rebuild the image. This can be a bit of a pain if you’re rebuilding often, so if this affects you just mount a a local directory as a volume at&lt;code&gt;/usr/local/app/certs&lt;/code&gt; and put your certificates there. This will persist across container changes and image builds.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;You probably wouldn’t want to use the nginx configuration provided here for production, but hopefully it demonstrates how easily we can add additional services into our development environment to bridge the gap to production one step at a time.&lt;/p&gt;

</description>
				
                        	<pubDate>Thu, 19 May 2016 00:00:00 +0100</pubDate>
				<link>https://www.ryanbrooks.co.uk/posts/2016-05-19-nginx-docker-proxy/</link>
				<guid isPermaLink="true">https://www.ryanbrooks.co.uk/posts/2016-05-19-nginx-docker-proxy/</guid>
			</item>
		
			<item>
				<title>Faster dependencies with Docker</title>
				<dc:creator></dc:creator>
				
					<description>&lt;p&gt;Docker is great for building portable applications, modelling complex environments locally, and helping us bridge the gap between development and production, but installing your Bundler, Bower, NPM, Maven (and so on) dependencies can make builds slow. This post explains how to speed up your builds by seeding the image with most of your dependencies, so subsequent builds aren’t hampered by the ‘all-or-nothing’ approach to updating dependencies.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;a-quick-note-on-terms&quot;&gt;A quick note on terms&lt;/h3&gt;

&lt;p&gt;This post talks about a &lt;code&gt;Gemfile&lt;/code&gt; and Ruby’s gems, but this post applies equally to libraries and dependencies in pretty much any other language. If you’re not familiar, the &lt;code&gt;Gemfile&lt;/code&gt; is the list of libraries, frameworks, and other 3rd party dependencies.&lt;/p&gt;

&lt;h3 id=&quot;rebuilding-gemsnpm-from-scratch-is-slow&quot;&gt;Rebuilding gems/NPM from scratch is slow&lt;/h3&gt;

&lt;p&gt;Docker images should contain all of the dependencies required to run your application. If we can guarantee that all our Bundler, NPM and Bower dependencies are already built into the image, we no longer need to worry about outages of &lt;code&gt;rubygems.org&lt;/code&gt; or &lt;code&gt;github.com&lt;/code&gt;. No contention there, right? However, building your dependencies into the Docker image comes at a cost: every time your dependency installation step happens there’s a good chance you’re blowing away every dependency you downloaded in the last build.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://robots.thoughtbot.com/rails-on-docker&quot;&gt;Thoughtbot Rails on Docker post&lt;/a&gt; demonstrates how to only bundle your gems when your &lt;code&gt;Gemfile&lt;/code&gt; changes, which at least means your dependencies aren’t re-downloaded every time the code changes. If your dependencies change regularly you’re still a bit stuck. Every time you add, remove or update a gem, the cache is invalidated and the &lt;code&gt;bundle install&lt;/code&gt; step runs again, downloading every gem from scratch.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://bradgessler.com/articles/docker-bundler/&quot;&gt;Brad Gessler built on that approach&lt;/a&gt; to leverage data volumes as a cross-container gem store. By updating the dependencies in a container you no longer need to re-build your image each time, which speeds up your development cycle immensely. This comes at a cost: by using volumes we’re maintaining state for the container which may not be obvious later on. This &lt;em&gt;may&lt;/em&gt; be fine, after all we don’t rebuild the image every time we change the code. However if we’re pushing towards immutable infrastructure it’s reasonable to treat your gems in the same way as your OS and system dependencies. This approach also allows our environments to diverge, so a piece of code can’t be expected to behave the same way for the same container if we run it on different machines with different sets of gems installed.&lt;/p&gt;

&lt;p&gt;The intention is solid, so how can we apply the same principles to the image build process instead?&lt;/p&gt;

&lt;h2 id=&quot;a-new-solution-cache-dependencies-from-a-point-in-the-past&quot;&gt;A new solution: cache dependencies from a point in the past&lt;/h2&gt;

&lt;p&gt;We can work around Docker’s behaviour of invalidating the cache on any change to the dependencies list by seeding our image with dependencies from a static point in time. Once we have the majority of our dependencies cached, subsequent &lt;code&gt;bundle install&lt;/code&gt;s will only need to grab the newer gems.&lt;/p&gt;

&lt;p&gt;We’ll start with an example and then pick it apart:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot;&gt;ENV APP=/usr/src/app
RUN mkdir $APP
WORKDIR $APP

# [1]
ADD https://raw.githubusercontent.com/user/repository/master/Gemfile .
ADD https://raw.githubusercontent.com/user/repository/master/Gemfile.lock .
RUN bundle install

# [2]
ADD Gemfile .
ADD Gemfile.lock .
RUN bundle install

# [3]
ADD . $APP
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What we’re doing here is fairly straightforward:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Install your dependencies from a source which changes infrequently. Here we’ve used the master branch of our repository, but you could use a tag or static commit and update it when your build takes too long.&lt;/li&gt;
  &lt;li&gt;Install any dependencies we didn’t get in [1]. This will just be new dependencies added in your current branch.&lt;/li&gt;
  &lt;li&gt;Add our source code (and do the rest of the build).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By grabbing our Gemfile from the &lt;code&gt;master&lt;/code&gt; branch we get most of our dependencies up-front. The subsequent &lt;code&gt;bundle install&lt;/code&gt; [2] then only needs to download dependencies that have been added as part of the feature branch. This means we can add and remove dependencies without fearing Docker invalidating the cache and downloading everything from scratch. Note that [2] and [3] are the popular approach to caching you’re probably already using, so all you need to do is add [1].&lt;/p&gt;

&lt;p&gt;Suddenly Docker on rubbish hotel wifi is fun again!&lt;/p&gt;

&lt;h3 id=&quot;an-aside-this-isnt-all-about-ruby&quot;&gt;An aside: this isn’t all about Ruby!&lt;/h3&gt;

&lt;p&gt;This approach isn’t Ruby specific, so you can speed up your NPM dependencies too:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot;&gt;ADD https://raw.githubusercontent.com/user/repository/master/package.json .
RUN npm install

ADD package.json .
RUN npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or your bower dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot;&gt;ADD https://raw.githubusercontent.com/user/repository/master/bower.json .
RUN bower install

ADD bower.json .
RUN bower install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You get the idea!&lt;/p&gt;

&lt;h3 id=&quot;picking-a-seed-point&quot;&gt;Picking a seed point&lt;/h3&gt;

&lt;p&gt;The point you cache in step [1] can make all the difference to your build times, particularly if your dependencies change regularly. We’ve chosen to minimise manual intervention by using the &lt;code&gt;master&lt;/code&gt; branch, ensuring the cache point will follow our deployed code closely. It’s also completely reasonable to use &lt;code&gt;develop&lt;/code&gt; if you have a slower release cadence.&lt;/p&gt;

&lt;h3 id=&quot;getting-the-historical-dependency-list&quot;&gt;Getting the historical dependency list&lt;/h3&gt;

&lt;p&gt;In the above examples, we have just referenced a public GitHub repository, but chances are you’re working with private repositories or outside of GitHub. Fear not, we’ve got you covered.&lt;/p&gt;

&lt;h4 id=&quot;private-github-repostories&quot;&gt;Private GitHub repostories&lt;/h4&gt;

&lt;p&gt;&lt;b&gt;Update (2016-07-27):&lt;/b&gt; &lt;em&gt;It turns out that the tokens described below expire after an arbitrary amount of time, so this approach will break regularly. Stay tuned for a stable approach, using the GitHub API.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;If you’re using GitHub private repositories you’re in luck: they generate per-file keys to allow you to access a file using a simple URL, e.g.:&lt;/del&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://raw.githubusercontent.com/spikeheap/spikeheap.github.io/13b4a64d90fece1889c6c24e8f736a2241fefc6c/README.md?token=AAcWYgmWJyDeDs_6aO-UemuC7ywONtd2ks5XKakOwA%3D%3D
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;del&gt;You can get the token for your files by viewing the file on GitHub and clicking ‘Raw’ before copying the URL from your address bar. &lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;Note that the tokens are &lt;strong&gt;per commit reference&lt;/strong&gt;, so you should use commit-specific URLs in preference to branch references. The following link will break and return &lt;code&gt;404&lt;/code&gt; as soon as &lt;code&gt;develop&lt;/code&gt; is updated:&lt;/del&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://raw.githubusercontent.com/spikeheap/spikeheap.github.io/develop/README.md?token=AAcWYgmWJyDeDs_6aO-UemuC7ywONtd2ks5XKakOwA%3D%3D
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;private-repositories-on-bitbucket-gitlab-etc&quot;&gt;Private repositories on BitBucket, GitLab, etc.&lt;/h4&gt;

&lt;p&gt;Most other services provide token-based access to raw files, and an exercise for the reader to work out their intricacies. &lt;a href=&quot;http://stackoverflow.com/a/34499948/384693&quot;&gt;This StackOverflow answer&lt;/a&gt; demonstrates it working for BitBucket.&lt;/p&gt;

&lt;p&gt;Be sure to consider where your keys/tokens may be exposed. The GitHub example uses tokens specific to each file/revision pair, so the cost of an exposed key is quite small. If you’re exposing your private API key which gives write-access to your repository, things are a little different 😱😨😰.&lt;/p&gt;

&lt;h4 id=&quot;fallback&quot;&gt;Fallback&lt;/h4&gt;

&lt;p&gt;If you’re using something completely esoteric, you can use Docker’s &lt;code&gt;RUN&lt;/code&gt; command in preference to &lt;code&gt;ADD&lt;/code&gt;ing them as we have above. Through &lt;code&gt;RUN&lt;/code&gt; you can curl your files down, install a custom client, or whatever you need.&lt;/p&gt;

&lt;h2 id=&quot;summary--tldr&quot;&gt;Summary / TL;DR&lt;/h2&gt;

&lt;p&gt;Using the above approach we get the benefits of cached dependencies with the benefits of quick builds and deployable artefacts.&lt;/p&gt;

&lt;p&gt;Deployments are hard. Striking a balance between stable production builds, fast development cycles and keeping development and production as close as possible is even harder.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Speed up your Docker image build time by using a version of your dependencies list which changes less frequently to leverage Dockers caching mechanism.&lt;/li&gt;
  &lt;li&gt;One good source for the more-stable dependencies list is your GitHub repository.&lt;/li&gt;
  &lt;li&gt;Be careful not to expose your keys and secrets.&lt;/li&gt;
  &lt;li&gt;Only do this if image build time is impacting some part of your life!&lt;/li&gt;
&lt;/ol&gt;

</description>
				
                        	<pubDate>Thu, 28 Apr 2016 00:00:00 +0100</pubDate>
				<link>https://www.ryanbrooks.co.uk/posts/2016-04-28-docker-speedy-dependencies/</link>
				<guid isPermaLink="true">https://www.ryanbrooks.co.uk/posts/2016-04-28-docker-speedy-dependencies/</guid>
			</item>
		
			<item>
				<title>Migrating user avatars to circular crops, with ImageMagick</title>
				<dc:creator></dc:creator>
				
					<description>&lt;p&gt;Picture the scene: you have a few thousand users with avatars on your site. You want to change from a boring 4x3 photo to a cool and hip circular crop. You know it’ll look great for new users, but we don’t want to leave the existing ones behind.
&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;Let’s imagine our current approach to user avatars is to accept any size and shape image. Because we’re sensible, we retain the originally uploaded image and generate a thumbnail to be used on the site which maintains the proportions but constrains the longest side to 100 pixels.&lt;/p&gt;

&lt;p&gt;Our new UI requires circular images at three different sizes (icon, default and large avatars). We want to take this opportunity to generate thumbnails at these sizes (and x2 for Retina screens) so we can keep file sizes small and our site as fast as possible. Because we can &lt;a href=&quot;http://www.abeautifulsite.net/how-to-make-rounded-images-with-css/&quot;&gt;easily create circular masks with CSS&lt;/a&gt;, we just need create square versions of the images, and we have a few options:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Stretch the image to fit a square. This is obviously a bad idea.&lt;/li&gt;
  &lt;li&gt;Crop the top/bottom or left/right of the longest side to make the image square.&lt;/li&gt;
  &lt;li&gt;Fit the entire image within the square, and pad the excess.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this case I believe option 2 gives the best outcome – no excess whitespace and wholly-filled circles, but our users didn’t have any of this in mind when they uploaded their images in the dim and distant past so we need to get an idea of how these changes will affect their existing images.&lt;/p&gt;

&lt;h4 id=&quot;image-dimensions&quot;&gt;Image dimensions&lt;/h4&gt;
&lt;p&gt;The first thing we can do is calculate the distribution of image proportions. This is useful alongside the assumption that squarer images are more likely to crop without losing the subject in the image.&lt;/p&gt;

&lt;p&gt;ImageMagick has a set of handy command-line tools to help us with this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;find avatar_images \
  -type f \
  -not -name &quot;thumb_*&quot; \
  -exec identify \
  -format %w\ %h\\n {} \; | awk &#39;{ print $1/$2 }&#39; | sort | cut -c1,2,3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example we search the &lt;code&gt;avatar_images&lt;/code&gt; directory, include all files, but filter out images we’ve generated in the past (prefixed with &lt;code&gt;thumb_&lt;/code&gt;). The output will be a list of the image propotions as double values (e.g. 4/3 → 1.333, 6/9 → 0.666).&lt;/p&gt;

&lt;p&gt;You can dump this list into Excel and &lt;a href=&quot;http://www.excel-easy.com/examples/histogram.html&quot;&gt;generate a histogram&lt;/a&gt;, or just use it to highlight how many values are outside of ‘squarish’.&lt;/p&gt;

&lt;p&gt;This approach can help if you have a very large set of user avatar images, but it doesn’t help us with the qualitative task of checking that they look ‘okay’ with the new circular crop.&lt;/p&gt;

&lt;h4 id=&quot;creating-an-avatar-montage-for-quick-visual-checking&quot;&gt;Creating an avatar montage for quick visual checking&lt;/h4&gt;

&lt;p&gt;Humans are really (really) good at recognising faces. They’re not so good at monotony, so walking through 10,000 users’ profile pages isn’t going to work very well. A montage of all the avatars on a single image works surprisingly well – even at smaller sizes the headless avatars or dodgy crops jumped out at us.&lt;/p&gt;

&lt;p&gt;ImageMagick is all set up to generate our rounded avatar images:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;#/bin/sh
convert $1 \
        -resize x800 -resize &#39;800x&amp;lt;&#39;   -resize 50% \
        -gravity center  -crop 400x400+0+0 +repage \
        \( +clone -threshold -1 -negate -fill white -draw &quot;circle 200,200 200,0&quot; \) \
                -alpha off -compose copy_opacity -composite \
                \-auto-orient \
    cropped_${1}.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This generates a circular mask, and overlays that on the cropped, centred image. Wrapping the above with &lt;code&gt;find&lt;/code&gt; allows us to loop through and process all our images:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# assumes we&#39;ve placed the above snippet crop_avatars.sh
mkdir cropped_images
find ./images -type f -exec ./crop_avatars.sh {} \;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now have a &lt;code&gt;cropped_images/&lt;/code&gt; directory containing smaller, rounder versions of the images. All we need to do then is stitch them together, and once again ImageMagick is there for us:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;montage cropped_images/* avatar_montage.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After all of that you should end up with something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2015-08-28_montage.jpg&quot; alt=&quot;A montage of user avatars&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Have fun with it, but don’t be surprised when everyone wants to see your new creation. For many organisations this could well be the first chance they’ve had to see many of their users, and a huge grid of (hopefully smiling) faces can be quite powerful.&lt;/p&gt;

&lt;h4 id=&quot;references&quot;&gt;References&lt;/h4&gt;

&lt;p&gt;The following pages were hugely helpful for figuring out how to achieve the different portions of ImageMagic magic:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://daemonsandagents.tumblr.com/post/108369306151/imagemagick-ways-of-cropping-an-image-to-a&lt;/li&gt;
  &lt;li&gt;http://www.imagemagick.org/Usage/resize/#space_fill&lt;/li&gt;
  &lt;li&gt;http://www.imagemagick.org/Usage/thumbnails/#fit_summery&lt;/li&gt;
  &lt;li&gt;http://www.imagemagick.org/Usage/crop/#crop_gravity&lt;/li&gt;
  &lt;li&gt;http://www.imagemagick.org/Usage/montage/&lt;/li&gt;
&lt;/ul&gt;

</description>
				
                        	<pubDate>Sat, 05 Sep 2015 00:00:00 +0100</pubDate>
				<link>https://www.ryanbrooks.co.uk/posts/2015-09-05-imagemagick-circular-avatars/</link>
				<guid isPermaLink="true">https://www.ryanbrooks.co.uk/posts/2015-09-05-imagemagick-circular-avatars/</guid>
			</item>
		
			<item>
				<title>Kitematic for boot2docker users</title>
				<dc:creator></dc:creator>
				
					<description>&lt;p&gt;A while ago I switched from using boot2docker directly to the Kitematic Mac app. Although Kitematic generally makes life a bit easier when managing Docker containers, it was a bit of a pain to get it running.&lt;/p&gt;

&lt;p&gt;After the Kitematic installation, the VM started but Kitematic had trouble connecting to it. The error messages showed &lt;code&gt;boot2docker&lt;/code&gt; paths so I made the assumption they’d got in a tangle. Uninstalling boot2docker didn’t entirely solve the problem, as I was still unable to connect using the terminal. The error pointed us in the right direction:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FATA[0000] Couldn&#39;t read ca cert /Users/rb/.boot2docker/certs/boot2docker-vm/ca.pem: open /Users/rb/.boot2docker/certs/boot2docker-vm/ca.pem: no such file or directory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The other error I was hitting was a bit more vague, but still points to a certificate issue.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Get http://192.168.99.102:2376/v1.17/containers/json: malformed HTTP response &quot;\x15\x03\x01\x00\x02\x02&quot;. Are you trying to connect to a TLS-enabled daemon without TLS?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may find it’s because the boot2docker environment variables are being set in your &lt;code&gt;.profile&lt;/code&gt;, &lt;code&gt;.bashrc&lt;/code&gt; or &lt;code&gt;.zshenv&lt;/code&gt;, something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export DOCKER_TLS_VERIFY=1
export DOCKER_HOST=tcp://192.168.59.103:2376
export DOCKER_CERT_PATH=/Users/rb/.boot2docker/certs/boot2docker-vm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To get the docker CLI playing nicely with our shiny new Kitematic instance, we just need to replace those lines with the following:
&lt;code&gt;bash
export DOCKER_TLS_VERIFY=1
export DOCKER_HOST=tcp://192.168.60.102:2376
export DOCKER_CERT_PATH=~/.docker/machine/machines/dev
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note that if (like me) you’ve already removed/reinstalled Kitematic, you may find the IP (and possibly subnet) has moved from &lt;code&gt;192.168.60.103&lt;/code&gt;. In my case it is now &lt;code&gt;192.168.99.102&lt;/code&gt;.&lt;/p&gt;

</description>
				
                        	<pubDate>Fri, 28 Aug 2015 00:00:00 +0100</pubDate>
				<link>https://www.ryanbrooks.co.uk/posts/2015-08-28-kitematic-for-boot2docker-users/</link>
				<guid isPermaLink="true">https://www.ryanbrooks.co.uk/posts/2015-08-28-kitematic-for-boot2docker-users/</guid>
			</item>
		
			<item>
				<title>Constraining width for LabKey WebParts and Views</title>
				<dc:creator></dc:creator>
				
					<description>&lt;p&gt;Building custom web views within LabKey is pretty straightforward, but if you find yourself needing to constrain the contents of your module horizontally you’ll quickly find that the surrounding tables will gladly stretch to any width. Fortunately restricting the width of hte container is pretty straightforward.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Wrap your contents in a table with &lt;code&gt;table-layout: fixed; width: 100%&lt;/code&gt; and the contents won’t push the surrounding page to wider than the browser window.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;LabKey’s JavaScript API is rich, and allows complex JavaScript applications to be built against it whilst being hosted as web parts or views within the standard LabKey environment. As big fans of &lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt; we were keen to leverage the structure and base components within our embedded application, but quickly came up against an issue where the web part container would grow infinitely to contain our contents. This made things like &lt;a href=&quot;http://getbootstrap.com/components/#nav-justified&quot;&gt;justified navs&lt;/a&gt; irksome as our content could grow horizontally.&lt;/p&gt;

&lt;p&gt;What we really needed was to constrain the view to 100% of the available space, which we achieved by wrapping it in a table with a specified width:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;table class=&quot;myapp&quot;&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;
        &amp;lt;h1&amp;gt;My amazing application&amp;lt;/h1&amp;gt;
      &amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;

&amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&amp;lt;%=contextPath%&amp;gt;/myapp/styles/index.min.css&quot;&amp;gt;
&amp;lt;script src=&quot;&amp;lt;%=contextPath%&amp;gt;/myapp/js/application.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;…and adding a CSS rule to set the table layout:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.myapp {
    table-layout: fixed; 
    width: 100%
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Table-based layouts are a bit out of fashion these days, but it’s necessary here because of the unbounded tables wrapping the web parts. If there’s a more elegant way of solving it, I’d love to hear about it in the comments.&lt;/p&gt;

&lt;p&gt;With that wrapper in place the standard Bootstrap components went back to behaving as they would in a standalone app, and we’re able to use &lt;code&gt;overflow-x: scroll&lt;/code&gt; where we need to display tables which don’t fit the viewport without breaking the width of the entire LabKey page.&lt;/p&gt;

</description>
				
                        	<pubDate>Tue, 16 Jun 2015 00:00:00 +0100</pubDate>
				<link>https://www.ryanbrooks.co.uk/posts/2015-06-16-labkey-full-width-apps/</link>
				<guid isPermaLink="true">https://www.ryanbrooks.co.uk/posts/2015-06-16-labkey-full-width-apps/</guid>
			</item>
		
			<item>
				<title>Reclaiming my Saturday mornings</title>
				<dc:creator></dc:creator>
				
					<description>&lt;p&gt;You hear it everywhere: ‘if you want something doing well, do it yourself’. Maybe the primary source is beleaguered managers in stagnant organisations where delivering on promises is the exception rather than the rule, who knows.&lt;/p&gt;

&lt;p&gt;That message ingrained itself in me as I grew up. When I started managing people and projects it took a huge effort to let go of the critical tasks, and not only to trust people to do the work well, but also to accept that ‘doing it well’ might actually involve doing it differently to how I would have.&lt;/p&gt;

&lt;p&gt;As a specialising generalist I’ve forged my career so far by trying to understand everything, and to be able to at least get by in most areas of technology. At home I take pride in being able to fix (just about) anything and &lt;a href=&quot;/posts/2013-12-01-pi-powered-central-heating-phase-1/&quot;&gt;hack the physical world&lt;/a&gt; to meet our needs. Plus, getting outside and chopping logs or fixing bikes is a nice distraction after a day in front of the computer.&lt;/p&gt;

&lt;p&gt;In short, I want to do everything, or at least be involved in everything. I want to understand what’s going on in the world around me, fuelled by curiosity and the feeling that I &lt;em&gt;should&lt;/em&gt; be able to do it.&lt;/p&gt;

&lt;p&gt;The problem I’ve faced recently, though, is that I don’t have enough time. Or rather, I don’t do enough of the things I &lt;strong&gt;really&lt;/strong&gt; care about. Moving to contract work has opened up a whole new world of things for me to learn and take on: accounting, law, marketing, operations; and all of that happens outside of the 9-to-5, when I’m working with clients.&lt;/p&gt;

&lt;p&gt;The Internet is full of answers, though they seem to primarily revolve around sleeping less or cutting out TV. I’m sure getting up earlier works for many, but I like my 8 hours sleep (when I get it) and don’t want to lose productivity later on as it catches up with me.&lt;/p&gt;

&lt;p&gt;If I end up in front of the TV it’s usually because I’ve run out of cognitive capacity and need a bit of downtime, so while watching less TV is a good idea, the benefit is in spending more time with the ones I love and getting outside.&lt;/p&gt;

&lt;p&gt;I may be painting a bleak picture, but over the past few weeks a couple of things have had a positive impact on how much I ‘get stuff done’:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Delegating as much as possible, and anything that doesn’t get me closer to my goal.&lt;/li&gt;
  &lt;li&gt;Working through tiny tasks in time that I’d usually just lose.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;delegate-it-all&quot;&gt;Delegate it all&lt;/h4&gt;

&lt;p&gt;How many things do you do because you have to, but which don’t directly contribute to your happiness or professional development? Cleaning, laundry, DIY, fixing the vacuum cleaner. Assuming you live in any reasonably built up area, there’s probably a host of companies specialising in these tasks, waiting to take them off your plate. How much is that 30-60 minutes a day worth to you? Could you swap out these tasks for paid employment for the same amount of time and end up &lt;em&gt;better off&lt;/em&gt;, or swap them out for time spent in the countryside or doing something you enjoy?&lt;/p&gt;

&lt;p&gt;The problem is that sounds very extravagant, right? I can’t imagine paying someone to clean my house so I don’t have to, and would almost feel ashamed that I wasn’t doing it myself. Yet somehow I don’t have a problem with Jennifer doing most of the cooking when I’ve got a busy stretch.&lt;/p&gt;

&lt;p&gt;Second-guessing each thing in my to-do list has been quite helpful, even though it’s hard work for me. Do I really need to learn how to repair wetsuits, research and purchase the best materials for it, then spend a couple of hours painstakingly gluing and stitching it, or could I just send it off to &lt;a href=&quot;http://www.bodylinewetsuitrepairs.co.uk/&quot;&gt;a wetsuit repair company&lt;/a&gt; (who’ll certainly do a much better job) for £15 or so?&lt;/p&gt;

&lt;h4 id=&quot;making-dead-time-work&quot;&gt;Making dead time work&lt;/h4&gt;

&lt;p&gt;I used to spend Saturday mornings working through a list of small, 5-minute jobs I’d built up during the week. Then I realised how many times I pulled out my phone and read BBC News for 5-10 minutes: on the bus, waiting for a meeting. I’d got to a point where anything less than a clear hour free and it didn’t seem worth starting something.&lt;/p&gt;

&lt;p&gt;Creating a new to-do list, containing only things that can be done in 5-30 minute bursts, has helped me reclaim this time. Technical podcasts (I thoroughly recommend &lt;a href=&quot;http://devchat.tv/ruby-rogues/&quot;&gt;the Ruby Rogues&lt;/a&gt; and &lt;a href=&quot;http://devchat.tv/adventures-in-angular&quot;&gt;Adventures in Angular&lt;/a&gt;) replace music while I’m walking around Oxford, expenses and timekeeping get done on the bus ride back into Oxford when I’m not cycling (so when I arrive home my work day is completely finished), and replying to Facebook and Twitter conversations get a few minutes before lunch or a cup of tea. Taking the bus for 20 minutes each morning last week enabled me write 80% of this blog post.&lt;/p&gt;

&lt;p&gt;These have helped me reclaim my Saturday mornings, and generally feel like I’m getting more done.&lt;/p&gt;

&lt;h4 id=&quot;the-big-caveat&quot;&gt;The big caveat&lt;/h4&gt;

&lt;p&gt;These two approaches have helped me feel like I’m making better progress. If you’ve found this while searching for how to get more done then hopefully it’ll help you too, but it comes with a caveat: &lt;strong&gt;there’s only a finite amount of time available to each of us&lt;/strong&gt;. Perhaps a better, third tip is to learn to say ‘no’, and to try not to take on too much, rather than trying to fit more in. Slowing things down can help you achieve more in the long run. I’m sure there’s a fable about that.&lt;/p&gt;

</description>
				
                        	<pubDate>Sun, 22 Mar 2015 00:00:00 +0000</pubDate>
				<link>https://www.ryanbrooks.co.uk/posts/2015-03-22-reclaiming-my-saturday-mornings/</link>
				<guid isPermaLink="true">https://www.ryanbrooks.co.uk/posts/2015-03-22-reclaiming-my-saturday-mornings/</guid>
			</item>
		
			<item>
				<title>App-wide AngularJS alerts</title>
				<dc:creator></dc:creator>
				
					<description>&lt;p&gt;Generic alerts are a common requirement in most web applications, and as your Angular application grows in complexity the importance of a standardised way of feeding back to the user gains importance with it. Luckily it’s quite straightforward to leverage Angular services as a system-wide alerting tool.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;There are a number of articles covering Angular user alerting, but each one relied on &lt;code&gt;$rootScope&lt;/code&gt; or nested scopes. I try to avoid use of the root scope where possible, in the same way we shun the use of the global namespace in JavaScript in general.&lt;/p&gt;

&lt;p&gt;Th first problem we need to solve is to collect and manage the list of alerts. to do this we can create a very simple Angular service:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;; (function (angular) {
  &amp;#39;use strict&amp;#39;;
  angular
    .module(&amp;#39;pageAlerts&amp;#39;)
    .factory(&amp;#39;PageAlertsService&amp;#39;, [ &amp;#39;$timeout&amp;#39;, function($timeout) {

      // Private functions and internal state
      var internal = {

        alerts: [],

        addAlert: function(type, message, autoClose) {
          var newAlert = {
            type: type,
            message: message,
            close: function() { internal.removeAlert(this) }
          };
          internal.alerts.push( newAlert );
          if(autoClose){
            $timeout(function() { newAlert.close() }, 5000)
          }
        },

        removeAlert: function(alert) {
          internal.alerts.splice( internal.alerts.indexOf(alert), 1);
        }
      };

      // Return the public API for the service
      // We&amp;#39;ll expose the `alerts` array for convenience
      return {
        addError: function(message, autoClose) {
          internal.addAlert(&amp;#39;danger&amp;#39;, message, autoClose);
        },
        addWarning: function(message, autoClose) {
          internal.addAlert(&amp;#39;warning&amp;#39;, message, autoClose);
        },
        addSuccess: function(message, autoClose) {
          internal.addAlert(&amp;#39;success&amp;#39;, message, autoClose);
        },

        alerts: internal.alerts
      };
    } ])
})(window.angular);
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/spikeheap/9709d80f14bf63050d6c.js?file=PageAlertsService.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;We can then create a directive to interact with the service:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;; (function (angular) {
  &amp;#39;use strict&amp;#39;;
  angular
    .module(&amp;#39;pageAlerts&amp;#39;)
    .directive(&amp;#39;pageAlerts&amp;#39;, [&amp;#39;PageAlertsService&amp;#39;, function(PageAlertsService) {
      return {
        templateUrl: &amp;#39;/directives/PageAlerts/PageAlerts.html&amp;#39;,
        replace: true,
        link: function (scope) {
          scope.alerts = PageAlertsService.alerts;
        }
      }
    }]);
}(window.angular));
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/spikeheap/9709d80f14bf63050d6c.js?file=PageAlerts.js&quot;&gt; &lt;/script&gt;

&lt;noscript&gt;&lt;pre&gt;&amp;lt;div&amp;gt;
  &amp;lt;alert ng-repeat=&amp;quot;alert in alerts&amp;quot; type=&amp;quot;{{alert.type}}&amp;quot; close=&amp;quot;alert.close()&amp;quot;&amp;gt;{{alert.message}}&amp;lt;/alert&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/spikeheap/9709d80f14bf63050d6c.js?file=PageAlerts.html&quot;&gt; &lt;/script&gt;

&lt;p&gt;The above example uses &lt;a href=&quot;TODO&quot;&gt;Angular Bootstrap&lt;/a&gt; alerts, but you can obviously roll your own within the directive.&lt;/p&gt;

&lt;p&gt;To add the alerts to your page all you need is &lt;code&gt;&amp;lt;my-page-alerts&amp;gt;&amp;lt;/my-page-alerts&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The service/directive pair results in a globally accessible alerting service without the need to pollute the &lt;code&gt;$rootScope&lt;/code&gt;. One criticism of this approach is that the service and directive are tightly coupled, but this can be remedied by passing in the service as an attribute to the directive, an exercise I’ll leave to the reader (but grab me in the comments or &lt;a href=&quot;https://twitter.com/spikeheap&quot;&gt;on Twitter&lt;/a&gt; if you want a hand ;) ).&lt;/p&gt;

</description>
				
                        	<pubDate>Tue, 17 Mar 2015 00:00:00 +0000</pubDate>
				<link>https://www.ryanbrooks.co.uk/posts/2015-03-17-angular-user-alerts/</link>
				<guid isPermaLink="true">https://www.ryanbrooks.co.uk/posts/2015-03-17-angular-user-alerts/</guid>
			</item>
		
			<item>
				<title>Give and tell challenge</title>
				<dc:creator></dc:creator>
				
					<description>&lt;p&gt;&lt;img src=&quot;https://farm4.staticflickr.com/3908/14848287869_804a39900f_z_d.jpg&quot; alt=&quot;Ice Bucket Challenge&quot; /&gt; &lt;small&gt;Image courtesy of &lt;a href=&quot;https://www.flickr.com/photos/quintanomedia/14848287869/&quot;&gt;Quintano Media / Flickr&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;The Ice Bucket Challenge has been a tour-de-force for charitable donations, and has raised a staggering amount of money for the undoubtedly underfunded organisations in the US and here in the UK. If you haven’t already, I’d urge you to &lt;a href=&quot;http://www.mndassociation.org/get-involved/donations&quot;&gt;consider donating&lt;/a&gt; to this worth cause and to find out more about the disease and how it affects people.&lt;/p&gt;

&lt;p&gt;It seems like a no-brainer, right? Not quite. Yesterday I was nominated and all of my misgivings were brought to the fore. Do I just do it and get on with life, or do I look like uncharitable douche and shun the craze. Luckily, thanks to &lt;a href=&quot;http://www.ceoblues.com/archive/2014/august/giveandtell&quot;&gt;Dan James&lt;/a&gt; and &lt;a href=&quot;https://medium.com/@boagworld/the-ice-bucket-challenge-e0663fbf6544&quot;&gt;Paul Boag&lt;/a&gt; there’s a third option, just giving (no trademark infringement intended).&lt;/p&gt;

&lt;h3 id=&quot;why-am-i-uncomfortable-with-it&quot;&gt;Why am I uncomfortable with it&lt;/h3&gt;

&lt;p&gt;I don’t want to dwell on the negatives, because after all this campaign has done a lot of good and helped to raise awareness about Motor Neurone Disease. There are also a number of people who have described my misgivings in far more eloquent terms (feel free to check out the links in the notes section at the bottom). Mostly I dislike the focus on dumping ice on your head rather than regularly supporting a charity and understanding the work it’s doing. It also feels very wrong to be wasting water and energy when &lt;a href=&quot;https://www.dosomething.org/facts/11-facts-about-water-developing-world&quot;&gt;884 million people lack access to safe water&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;my-cause-the-ms-trust&quot;&gt;My cause, the MS Trust&lt;/h3&gt;

&lt;p&gt;Multiple sclerosis is a disease which affects &lt;a href=&quot;http://www.mstrust.org.uk/information/aboutms/keyfacts.jsp&quot;&gt;over 100,000&lt;/a&gt; people in the UK alone, and has no known cure. It’s a degenerative disease of the nervous system and affects people in a myriad different ways but often affects vision, sleep and mobility.&lt;/p&gt;

&lt;p&gt;Multiple sclerosis is close to my heart because my father has suffered with it for over 10 years. Last year I &lt;a href=&quot;http://teampedal.com&quot;&gt;cycled from Bangor to Switzerland&lt;/a&gt; to raise money for the MS Trust and awareness of multiple sclerosis in general, and hope to do an even bigger challenge in the near future.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://www.mstrust.org.uk/donate-online/&quot;&gt;MS Trust&lt;/a&gt; is a charity focussed on helping people with multiple sclerosis by providing information and support, and funding research and training for healthcare professionals. I particularly like that they are all about helping sufferers of MS, enabling them to manage the disease and still make the most of their lives. Until a cure is found it’s the support networks and education within the healthcare industry that has a huge impact on people living with MS.&lt;/p&gt;

&lt;p&gt;So today I have donated to them again, and reminded myself that I need to do more.&lt;/p&gt;

&lt;h3 id=&quot;just-give&quot;&gt;Just give&lt;/h3&gt;

&lt;p&gt;So my message is really this: find a cause you care about and think about what you can do to help. Maybe it’s donating money, in which case remember that regular small donations have a much more positive effect than one-off larger donations. Maybe it’s a more hands-on approach offering pro-bono work or heading to a local centre to help out. If you feel comfortable evangelising your goodwill in the hope of raising awareness that’s fine too. If you’re not and want to keep your charitable donations under wraps, that’s fine too. After all, it’s not about us really.&lt;/p&gt;

&lt;h3 id=&quot;nominating-others&quot;&gt;Nominating others&lt;/h3&gt;

&lt;p&gt;So it’s my turn to hand on the baton and nominate three more people to highlight a charity they care about or give to a charity and tell us about them. But why stop at three? Three’s to few.&lt;/p&gt;

&lt;p&gt;Instead I nominate you, the reader, to take up this challenge. I know you’re there, so don’t shirk your responsibility. Let me know when you’ve done it in the comments. Or don’t if you’re a bit bitter that I got you into this mess.&lt;/p&gt;

&lt;p&gt;If you don’t like the sound of that, feel free to dump a bucket of icy water over your head and upload it to YouTube as well. It’s all helping spread the word for good causes.&lt;/p&gt;

&lt;p&gt;Other links:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.telegraph.co.uk/men/the-filter/11058891/Why-I-turned-down-the-Ice-Bucket-Challenge.html&quot;&gt;Why I turned down the Ice Bucket Challenge (The Telegraph)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.theguardian.com/commentisfree/2014/aug/26/dodge-ice-bucket-challenge-avoid-fun-retain-dignity&quot;&gt;How to dodge the ice bucket challenge (The Guardian)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.telegraph.co.uk/news/worldnews/europe/spain/11059346/Ice-bucket-challenge-Belgian-man-taken-to-hospital-after-400-gallons-of-water-dropped-on-his-head-by-plane.html&quot;&gt;Man vs. firefighting plane (The Telegraph)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@seanuk/give-and-tell-challenge-834534af3373&quot;&gt;Give and Tell Challenge (Medium)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@boagworld/the-ice-bucket-challenge-e0663fbf6544&quot;&gt;The ice bucket challenge (Medium)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ceoblues.com/archive/2014/august/giveandtell&quot;&gt;Give and Tell (CEO Blues)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
				
                        	<pubDate>Sat, 27 Sep 2014 00:00:00 +0100</pubDate>
				<link>https://www.ryanbrooks.co.uk/posts/2014-09-27-give-and-tell/</link>
				<guid isPermaLink="true">https://www.ryanbrooks.co.uk/posts/2014-09-27-give-and-tell/</guid>
			</item>
		
			<item>
				<title>JSOxford NodeBots, August 2014</title>
				<dc:creator></dc:creator>
				
					<description>&lt;p&gt;On the 23rd of August we ran the last event in the &lt;a href=&quot;http://jsoxford.com/2014/summer-of-hacks/&quot;&gt;JSOxford 2014 Summer of Hacks&lt;/a&gt;, building JavaScript powered NodeBots. Cue maniacal cackling as we plan to take over the world.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;A &lt;a href=&quot;http://nodebots.io/&quot;&gt;NodeBot&lt;/a&gt; is any JavaScript-powered robot, and the aim of the day was to bridge the gap into the physical world with the help of Arduinos, sensors, servos, motors, LEDs and a load of LEGO.&lt;/p&gt;

&lt;p&gt;Most importantly, &lt;a href=&quot;https://www.youtube.com/watch?v=uEx5G-GOS1k&quot;&gt;we had a flag&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2014-08-27_03.jpg&quot; alt=&quot;NodeBots flag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/intent/follow?screen_name=_alanshaw&quot;&gt;Alan Shaw&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/intent/follow?screen_name=olizilla&quot;&gt;Oli Evans&lt;/a&gt; very kindly came up for the day from London to impart some of their NodeBots wizardry on us and show off their impressive suite of hardware. It was great to start the day with the message that ‘hardware is really hard’ – as I repeatedly drove our JS remote control car into the wall I was definitely feeling that!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2014-08-27_09.jpg&quot; alt=&quot;NodeBots presentation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We purchased 10 &lt;a href=&quot;http://oomlout.co.uk/&quot;&gt;oomlout starter kits&lt;/a&gt; and had a few servos, Arduino Uno boards and a load of wires kicking around, so there was plenty of kit and the day started with most people running through the introductory blinking LED lessons. Some chose to start with Arduino and some went straight to using the Johnny Five library, a JS library for controlling the Arduino inputs/outputs over the USB cable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2014-08-27_04.jpg&quot; alt=&quot;npm install johnny-five (t-shirt)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the initial single-LED board was out the way things got a bit more interesting, and the rest of the day saw some cool little projects at varying levels of completeness (sorry if I forgot yours):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A parking sensor which evolved into an &lt;a href=&quot;http://instagram.com/p/sC_S_npxm-&quot;&gt;octocat alert&lt;/a&gt; with lights, beeping an waving octocats.&lt;/li&gt;
  &lt;li&gt;A RESTful web-based temperature sensor.&lt;/li&gt;
  &lt;li&gt;A temperature-sensing board with LCD display.&lt;/li&gt;
  &lt;li&gt;A device built with Scratch for Arduino.&lt;/li&gt;
  &lt;li&gt;2-bit Guitar Hero. I still have that Sweet Child O’ Mine riff replaying in my head.&lt;/li&gt;
  &lt;li&gt;An RC car with automatic braking to avoid obstacles (or not, it turned out)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We deliberately didn’t set a particular objective so everyone could plough on at their own pace and dive into whatever grabbed their interest. This worked really well, and had the added advantage that it was really easy to organise!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2014-08-27_10.jpg&quot; alt=&quot;Marcus, Chris and sensors&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After Oli and Alan had got us all excited about the possibilities they set about linking a Logitech gaming joypad with the CrazyFlie, a cool but twitchy little quadcopter with a death-wish. These little devices are quite exciting (there’s nothing boring about flying) but can pick up a lot of speed and cause a lot of damage to themselves with a bit of errant programming.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2014-08-27_06.jpg&quot; alt=&quot;Crazyflie quadcopter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Needless to say it didn’t take long before the inevitable:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p&gt;...annnnd the &lt;a href=&quot;https://twitter.com/hashtag/crazyflie?src=hash&quot;&gt;#crazyflie&lt;/a&gt; is broken :( &lt;a href=&quot;https://twitter.com/JSOxford&quot;&gt;@JSOxford&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/nodebots?src=hash&quot;&gt;#nodebots&lt;/a&gt;&lt;/p&gt;&amp;mdash; Alan Shaw (@_alanshaw) &lt;a href=&quot;https://twitter.com/_alanshaw/statuses/503178382201618433&quot;&gt;August 23, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Fortunately there was plenty of other kit to get overly enthusiastic about.&lt;/p&gt;

&lt;p&gt;One limitation of johnny-five is that you need a connection to a laptop to run the JavaScript, so roving machines or fighting bots can be a problem. The &lt;a href=&quot;http://www.espruino.com/&quot;&gt;Espruino&lt;/a&gt; and &lt;a href=&quot;https://tessel.io/&quot;&gt;Tessel&lt;/a&gt; boards look really promising because they take different approaches to enabling developers to write JS and end up with a standalone board.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2014-08-27_07.jpg&quot; alt=&quot;Tessel board&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;pinoccio-and-the-dension-wirc&quot;&gt;Pinoccio and the Dension WiRC&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/intent/follow?screen_name=paradigm_tee&quot;&gt;Chris&lt;/a&gt; and I wanted to hack on the JSOxford RC cars, a trio of &lt;a href=&quot;http://www.dension.com/product/wirc-wifi-rc-receiver&quot;&gt;Dension WiRC&lt;/a&gt; cars which can be controlled using JavaScript over WiFi and have a webcam onboard. The is a &lt;a href=&quot;https://github.com/jsoxford/node-wirc&quot;&gt;node library&lt;/a&gt; from a previous hack-day to communicate with the car.&lt;/p&gt;

&lt;p&gt;Our first thought was to add more sensors to the existing car but that didn’t seem possible so we settled on the idea of using a Pinoccio board as a sensor array and then have a single JS script running on the laptop which would use these sensor readings to action the car. The Pinoccio board seemed perfect for this because the ‘lead scout’ board has a WiFi backpack. Now that I’ve had a couple of days to look into Pinoccio in a bit more detail it’s clear that all the limitations I’m about to talk about were because of our lack of understanding. Hopefully we’ll run another NodeBots day and get a chance to play with it again.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2014-08-27_13.jpg&quot; alt=&quot;Pinoccio boards&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pinocc.io/&quot;&gt;Pinoccio boards&lt;/a&gt; are a great idea: mesh-networked Arduino-based devices which connect to the Internet by default, combined with a web-based IDE. The result is a system you can get up and running with in minutes. Needless to say, having feedback on the IR rangefinder’s value in the IDE without typing a single line of code got us quite excited.&lt;/p&gt;

&lt;p&gt;I’d thoroughly recommend having a closer look at the Pinoccio boards. I am particular taken by the way it has battery (including charging), wireless networking, and more importantly a way to access the device from a computer without needing to plug in. The boards also have a temperature sensor which is a nice addition for the home automation projects I’m thinking about.&lt;/p&gt;

&lt;p&gt;Unfortunately our enthusiasm was stifled when we tried to use the &lt;a href=&quot;https://github.com/Pinoccio/client-node-pinoccio/&quot;&gt;node client library&lt;/a&gt;. While it’s suitable for non-realtime applications, the library connects to hq.pinocc.io rather than to the device, which leads to &amp;gt;1s latency for reads. The &lt;a href=&quot;https://www.npmjs.org/package/pinoccio-server&quot;&gt;pinoccio-server&lt;/a&gt; package allows you to run your own HQ, and I’d guess that while flashing the devices with the updated server address you’d also be able to update the refresh rate (obviously at the expense of battery life).&lt;/p&gt;

&lt;p&gt;Using &lt;a href=&quot;http://support.pinocc.io/hc/en-us/articles/200250539-ScoutScript-Overview#functions&quot;&gt;ScoutScript commands&lt;/a&gt; it’s possible to write functions and save them on the device, which is great if a scout on the mesh needs to carry out an action when another scout on the network detects an input. We didn’t find this section of the docs until after the event. Sad face.&lt;/p&gt;

&lt;p&gt;So at the moment I’m not sure how you’d go about streaming the live status of an input at a greater resolution than once per second, but I know it’s possible because of &lt;a href=&quot;http://projectable.me/post/48713397681/scout6050-i-was-asked-to-put-together-a-quick&quot;&gt;this video&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It’s a shame we only had the afternoon to play around with these devices, and I’ll be picking up a pair soon to play with over winter.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2014-08-27_15.jpg&quot; alt=&quot;Group hacking on hardware and laptops&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Thanks to everyone who’s helped out with the JSOxford Summer or Hacks and made it possible, and a huge thanks to &lt;a href=&quot;https://twitter.com/intent/follow?screen_name=benjaminbenben&quot;&gt;Ben&lt;/a&gt; for coming up with the idea in the first place. We also owe &lt;a href=&quot;https://twitter.com/intent/follow?screen_name=_alanshaw&quot;&gt;Alan Shaw&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/intent/follow?screen_name=olizilla&quot;&gt;Oli Evans&lt;/a&gt; at least one or two beers for bringing their skills and enthusiasm and giving up a day to escape the big smoke.&lt;/p&gt;

&lt;p&gt;I’ve also got to say a big ‘thank you’ to the great sponsors who’ve made it possible to make the events almost free:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.b2m-solutions.com/&quot;&gt;B2M Solutions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.haybrook.co.uk/&quot;&gt;Haybrook IT Resourcing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://teamtreehouse.com/&quot;&gt;Treehouse&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.whiteoctober.co.uk/&quot;&gt;White October&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Looking forward to the autumn and winter, we’re keen to keep the JavaScript community in Oxford buzzing, so &lt;a href=&quot;https://twitter.com/intent/tweet?text=Yo%20@JSOxford!&quot;&gt;get in touch with us on Twitter&lt;/a&gt; to let us know:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What you’d like to talk about or listen to at upcoming meetups.&lt;/li&gt;
  &lt;li&gt;Which events you’d like to see come to Oxford, and which events you’d love to see happen again.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m not the only one to write up the event:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.marcusnoble.co.uk/2014-08-24-nodebots/&quot;&gt;Marcus Noble’s blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
				
                        	<pubDate>Wed, 27 Aug 2014 00:00:00 +0100</pubDate>
				<link>https://www.ryanbrooks.co.uk/posts/2014-08-27-jsoxford-nodebots-day/</link>
				<guid isPermaLink="true">https://www.ryanbrooks.co.uk/posts/2014-08-27-jsoxford-nodebots-day/</guid>
			</item>
		
			<item>
				<title>Groovy SOAP clients with ws-lite</title>
				<dc:creator></dc:creator>
				
					<description>&lt;p&gt;When we needed to quickly build a proof-of-concept to test a set of SOAP services I thought: “this is perfect for Groovy, and it’s DSL support will mean talking to SOAP won’t require stub generation or any of that pain”. I was almost right.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TLDR;&lt;/strong&gt; My client script is &lt;a href=&quot;https://gist.github.com/spikeheap/b5428f11834a0cea3822&quot;&gt;available as a GitHub gist&lt;/a&gt; for cannibalisation.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;SOAP is &lt;em&gt;almost&lt;/em&gt; legacy, but it’s still the only way to interface with large enterprise systems, at least in healthcare. Just as I’ve come to accept that CSV is &lt;strong&gt;the&lt;/strong&gt; way everyone sends lab and patient records (when they’re not exporting to Excel sheets), I wasn’t surprised when our project with MirthResults and MirthConnect only had SOAP calls to add patients to a component. No problem, I thought, just Google “Groovy SOAP” and I’ll be done in 10 minutes.&lt;/p&gt;

&lt;p&gt;So, the top result is &lt;a href=&quot;http://groovy.codehaus.org/Groovy+SOAP&quot;&gt;the Groovy SOAP documentation&lt;/a&gt;, which does say (although not very obviously) that it’s deprecated. That’s fine, it suggests its replacement, &lt;a href=&quot;http://groovy.codehaus.org/GroovyWS&quot;&gt;GroovyWS&lt;/a&gt;. But that page tells you to ‘be careful’ because the project is dormant. Not to worry, because it suggests looking at &lt;a href=&quot;https://github.com/jwagenleitner/groovy-wslite&quot;&gt;groovy-wslite&lt;/a&gt;. I’m already feeling like I’m entering the rabbit hole.&lt;/p&gt;

&lt;p&gt;Fortunately groovy-wslite is an active project and has commits (at the time of writing) from just over a month ago. The DSL is pretty straightforward so I set about connecting to the target WSDL and then added basic authentication. The documentation for the project is quite sparse, so this post is an attempt to bring together the bits that I needed.&lt;/p&gt;

&lt;p&gt;If you need anything other than ‘Basic’ HTTP autentication, stop right there. The project doesn’t seem to support ‘Digest’ or ‘NTLM’ authentication, so you might be better going for &lt;a href=&quot;http://stackoverflow.com/questions/15940234/how-to-do-a-soap-web-service-call-from-java-class&quot;&gt;plain Java SOAP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In a simple script, you can just grab the wslite dependency and connect in a couple of lines:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;@Grab(group=&#39;com.github.groovy-wslite&#39;, module=&#39;groovy-wslite&#39;, version=&#39;1.1.0&#39;)
 
import groovy.xml.*
import wslite.soap.*
import wslite.http.auth.*
 
def client = new SOAPClient(&#39;https://mirthtest.local:11443/ClinicalDocumentWSService/ClinicalDocumentWS?wsdl&#39;)
client.authorization = new HTTPBasicAuthorization(&quot;username&quot;, &quot;password&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s then trivially easy to do a SOAP call:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;def response = client.send(
		connectTimeout:5000,
		readTimeout:20000,
		useCaches:false,
		followRedirects:false,
		sslTrustAllCerts:true) {
	envelopeAttributes &quot;xmlns:ejb&quot;:&quot;http://ejb.results.mirth.com/&quot;
	body {
		&quot;ejb:getSubjectGroupMemberIds&quot; {
			subjectGroupId( &#39;MySubjectGroup&#39; )
			subjectGroupStatusId( &#39;NEW&#39; )
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The response we get back contains a bit of extra information, so it’s worth checking the response code before ploughing on:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;def returnVal
if(response.httpResponse.statusMessage==&quot;OK&quot;) {
	returnVal = response.getSubjectGroupMemberIdsResponse.&#39;return&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s worth noting that the response element is the name of the service call suffixed with ‘Response’. We can then dump the XML in a readable form to the console if we like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;println XmlUtil.serialize(returnVal) // Obviously use a logger here instead :)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also interrogate the XML tree in the same way we would a normal object structure:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;def memberCount = returnVal.results.list.size()
println &quot;There are ${memberCount} members initially&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the following gist I’ve abstracted the SOAP call away into its own method and then created a method for each SOAP call to give me a quick and easy interface to demo the SOAP calls from the console. Feel free to fork, copy, adapt to your own needs.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;@Grab(group=&amp;#39;com.github.groovy-wslite&amp;#39;, module=&amp;#39;groovy-wslite&amp;#39;, version=&amp;#39;1.1.0&amp;#39;)

import groovy.xml.*
import wslite.soap.*
import wslite.http.auth.*

def client = new SOAPClient(&amp;#39;https://dummy:11443/ClinicalDocumentWSService/ClinicalDocumentWS?wsdl&amp;#39;)
client.authorization = new HTTPBasicAuthorization(&amp;quot;mirth&amp;quot;, &amp;quot;password&amp;quot;)

// Grab the latest member list
def members = getSubjectGroupMemberIds(client, &amp;#39;GROUP001&amp;#39;, &amp;#39;NEW&amp;#39;).results
def memberCount = members.list.size()
println &amp;quot;There are ${memberCount} members initially&amp;quot;

// Get a patient
def retrievedSubject = getPatientsByFilterWithoutClinicalItems(client, {
    firstName(&amp;quot;Bob&amp;quot;)
    lastName(&amp;quot;Bunting&amp;quot;)
    numRows(1)
  }) 
def subjectId = retrievedSubject.results.list.id
println &amp;quot;Subject ID: ${subjectId}, name: ${retrievedSubject.results.list.name.first} ${retrievedSubject.results.list.name.middle} ${retrievedSubject.results.list.name.last}&amp;quot;

// Add the patient to the subjects of interest list (NEW, ACTIVE, EXCLUDED, RETIRED)
println XmlUtil.serialize( createSubjectGroupMember(client, &amp;#39;GROUP001&amp;#39;, &amp;#39;NEW&amp;#39;, &amp;#39;MYSTATUS&amp;#39;, subjectId) )

// Grab the latest member list
members = getSubjectGroupMemberIds(client, &amp;#39;GROUP001&amp;#39;, &amp;#39;NEW&amp;#39;).results
assert  members.list.size() == (memberCount + 1)

println XmlUtil.serialize(members)


// SOAP call methods

def getSubjectGroupMemberIds(client, groupId, groupStatusId){
  doSOAPRequest( client, &amp;#39;getSubjectGroupMemberIds&amp;#39;, {
    subjectGroupId( groupId )
    subjectGroupStatusId( groupStatusId )
  })
}

/**
 * Typically search by forename, surname, dob and gender
 * also by patient alias (NHS # or MRN #)
 **/
def getPatientsByFilterWithoutClinicalItems(client, subjectFilter){
  doSOAPRequest( client, &amp;#39;getPatientsByFilterWithoutClinicalItems&amp;#39;, {
    subjectFilterModel subjectFilter
  })
}


def createSubjectGroupMember(client, groupId, groupStatusId, recFacilityId, patientId){
  doSOAPRequest( client, &amp;#39;createSubjectGroupMember&amp;#39;, {
    subjectGroupId( groupId )
    subjectGroupStatusId( groupStatusId )
    subjectId( patientId )
    receivingFacilityId ( recFacilityId )
    createSubjectGroupMemberExt( 0 ) // &amp;#39;0&amp;#39; causes an update to fail silently if it exists already.
  })
}


/**
 * Do a SOAP request with the given command and payload.
 * Doesn&amp;#39;t massage the payload, this method is just to reduce copy/paste for the SOAP request.
 **/
def doSOAPRequest(client, command, commandBody){
  def response = client.send(
                           connectTimeout:5000,
                           readTimeout:20000,
                           useCaches:false,
                           followRedirects:false,
                           sslTrustAllCerts:true) {
    envelopeAttributes &amp;quot;xmlns:ejb&amp;quot;:&amp;quot;http://ejb.results.mirth.com/&amp;quot;
    body {
        &amp;quot;ejb:${command}&amp;quot;(commandBody)
    }
  }
  okStatus(response) ? response.&amp;quot;${command}Response&amp;quot;.&amp;#39;return&amp;#39; : null
}


/**
 * Check that the HTTP response is good.
 * Shamelessly lifted from https://confluence.sakaiproject.org/display/WEBSVCS/WS-Groovy
 **/
def okStatus( SOAPResponse response ){
  return response.httpResponse.statusMessage==&amp;quot;OK&amp;quot;
}
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/spikeheap/b5428f11834a0cea3822.js&quot;&gt; &lt;/script&gt;

</description>
				
                        	<pubDate>Thu, 21 Aug 2014 00:00:00 +0100</pubDate>
				<link>https://www.ryanbrooks.co.uk/posts/2014-08-21-groovy-soap-wslite/</link>
				<guid isPermaLink="true">https://www.ryanbrooks.co.uk/posts/2014-08-21-groovy-soap-wslite/</guid>
			</item>
		
	</channel>
</rss>